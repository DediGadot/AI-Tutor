[tool:pytest]
# Pytest Configuration for Hebrew AI Tutor Testing
minversion = 6.0
addopts =
    -ra
    --strict-markers
    --strict-config
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing:skip-covered
    --cov-report=xml
    --cov-fail-under=80
    --html=reports/pytest_report.html
    --self-contained-html
    -p no:warnings
    --tb=short
    --maxfail=3

testpaths =
    tests

markers =
    # Test types
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests using Playwright
    accessibility: Accessibility compliance tests
    performance: Performance and load tests
    security: Security vulnerability tests

    # Feature areas
    agents: LangGraph agent tests
    frontend: React component tests
    backend: FastAPI backend tests
    database: Database and persistence tests
    llm: LLM integration tests

    # Language and locale
    hebrew: Hebrew language specific tests
    rtl: Right-to-left layout tests
    i18n: Internationalization tests

    # User scenarios
    student: Student user journey tests
    parent: Parent dashboard tests
    tutor: AI tutor behavior tests

    # Environment
    slow: Tests that take more than 10 seconds
    network: Tests requiring network access
    browser: Tests requiring browser automation

    # Test quality
    flaky: Tests that may be flaky
    smoke: Basic smoke tests
    regression: Regression tests

python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::FutureWarning

# Asyncio
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Coverage
[coverage:run]
source = .
omit =
    venv/*
    tests/*
    */migrations/*
    */node_modules/*
    .venv/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod